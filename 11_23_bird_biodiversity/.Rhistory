lng2 = max(c(st_bbox(bird_red_census)$xmax, st_bbox(merged_data1)$xmax)),
lat2 = max(c(st_bbox(bird_red_census)$ymax, st_bbox(merged_data1)$ymax)))
st_crs(bird_red_census)
st_crs(merged_data1)
# Transform the sf objects to WGS84
bird_red_census <- st_transform(bird_red_census, 4326, quiet = TRUE)
merged_data1 <- st_transform(merged_data1, 4326, quiet = TRUE)
# Create leaflet map
leaflet() %>%
# Add polygons for the discrete variable
addPolygons(data = bird_red_census, fillColor = ~holc_grade, color = "white", weight = 1, fillOpacity = 0.7,
palette = viridis::viridis_pal(option = "D", direction = -1)(length(unique(bird_red_census$holc_grade)))) %>%
# Add polygons for the continuous variable
addPolygons(data = merged_data1, fillColor = ~percent_in_poverty, color = "white", weight = 1, fillOpacity = 0.7,
palette = viridis::viridis_c(10)) %>%
# Add legend for discrete variable
addLegend("bottomright", colors = viridis::viridis_pal(option = "D", direction = -1)(length(unique(bird_red_census$holc_grade))),
labels = unique(bird_red_census$holc_grade), title = "Holc Grade") %>%
# Add legend for continuous variable
addLegend("bottomleft", colors = viridis::viridis_c(10),
values = ~percent_in_poverty, title = "Percent in Poverty") %>%
# Add red points
addCircleMarkers(data = point_sf, color = "red", radius = 5) %>%
# Set view to the extent of the data
fitBounds(lng1 = min(c(st_bbox(bird_red_census)$xmin, st_bbox(merged_data1)$xmin)),
lat1 = min(c(st_bbox(bird_red_census)$ymin, st_bbox(merged_data1)$ymin)),
lng2 = max(c(st_bbox(bird_red_census)$xmax, st_bbox(merged_data1)$xmax)),
lat2 = max(c(st_bbox(bird_red_census)$ymax, st_bbox(merged_data1)$ymax)))
# Transform the sf objects to WGS84
bird_red_census <- st_transform(bird_red_census, 4326, quiet = TRUE)
merged_data1 <- st_transform(merged_data1, 4326, quiet = TRUE)
# Create leaflet map
leaflet() %>%
# Add polygons for the discrete variable
addPolygons(data = bird_red_census, fillColor = ~colorFactor(holc_grade, palette = viridis_pal(option = "D", direction = -1)(length(unique(bird_red_census$holc_grade)))), color = "white", weight = 1, fillOpacity = 0.7) %>%
# Add polygons for the continuous variable
addPolygons(data = merged_data1, fillColor = ~colorNumeric(percent_in_poverty, palette = viridis_c(10)), color = "white", weight = 1, fillOpacity = 0.7) %>%
# Add legend for discrete variable
addLegend("bottomright", colors = viridis_pal(option = "D", direction = -1)(length(unique(bird_red_census$holc_grade))),
labels = unique(bird_red_census$holc_grade), title = "Holc Grade") %>%
# Add legend for continuous variable
addLegend("bottomleft", pal = colorNumeric(palette = viridis_c(10), domain = merged_data1$percent_in_poverty),
values = ~percent_in_poverty, title = "Percent in Poverty") %>%
# Add red points
addCircleMarkers(data = point_sf, color = "red", radius = 5) %>%
# Set view to the extent of the data
fitBounds(lng1 = min(c(st_bbox(bird_red_census)$xmin, st_bbox(merged_data1)$xmin)),
lat1 = min(c(st_bbox(bird_red_census)$ymin, st_bbox(merged_data1)$ymin)),
lng2 = max(c(st_bbox(bird_red_census)$xmax, st_bbox(merged_data1)$xmax)),
lat2 = max(c(st_bbox(bird_red_census)$ymax, st_bbox(merged_data1)$ymax)))
library(viridis)
# Transform the sf objects to WGS84
bird_red_census <- st_transform(bird_red_census, 4326, quiet = TRUE)
merged_data1 <- st_transform(merged_data1, 4326, quiet = TRUE)
# Create leaflet map
leaflet() %>%
# Add polygons for the discrete variable
addPolygons(data = bird_red_census, fillColor = ~colorFactor(holc_grade, palette = viridis_pal(option = "D", direction = -1)(length(unique(bird_red_census$holc_grade)))), color = "white", weight = 1, fillOpacity = 0.7) %>%
# Add polygons for the continuous variable
addPolygons(data = merged_data1, fillColor = ~colorNumeric(percent_in_poverty, palette = viridis_c(10)), color = "white", weight = 1, fillOpacity = 0.7) %>%
# Add legend for discrete variable
addLegend("bottomright", colors = viridis_pal(option = "D", direction = -1)(length(unique(bird_red_census$holc_grade))),
labels = unique(bird_red_census$holc_grade), title = "Holc Grade") %>%
# Add legend for continuous variable
addLegend("bottomleft", pal = colorNumeric(palette = viridis_c(10), domain = merged_data1$percent_in_poverty),
values = ~percent_in_poverty, title = "Percent in Poverty") %>%
# Add red points
addCircleMarkers(data = point_sf, color = "red", radius = 5) %>%
# Set view to the extent of the data
fitBounds(lng1 = min(c(st_bbox(bird_red_census)$xmin, st_bbox(merged_data1)$xmin)),
lat1 = min(c(st_bbox(bird_red_census)$ymin, st_bbox(merged_data1)$ymin)),
lng2 = max(c(st_bbox(bird_red_census)$xmax, st_bbox(merged_data1)$xmax)),
lat2 = max(c(st_bbox(bird_red_census)$ymax, st_bbox(merged_data1)$ymax)))
install.packages("viridis")
install.packages("viridis")
library(osmdata)
library(sf)
library(ggplot2)
library(leaflet)
library(viridis)
# Transform the sf objects to WGS84
bird_red_census <- st_transform(bird_red_census, 4326, quiet = TRUE)
merged_data1 <- st_transform(merged_data1, 4326, quiet = TRUE)
# Create leaflet map
leaflet() %>%
# Add polygons for the discrete variable
addPolygons(data = bird_red_census, fillColor = ~colorFactor(holc_grade, palette = viridis_pal(option = "D", direction = -1)(length(unique(bird_red_census$holc_grade)))), color = "white", weight = 1, fillOpacity = 0.7) %>%
# Add polygons for the continuous variable
addPolygons(data = merged_data1, fillColor = ~colorNumeric(percent_in_poverty, palette = viridis_c(10)), color = "white", weight = 1, fillOpacity = 0.7) %>%
# Add legend for discrete variable
addLegend("bottomright", colors = viridis_pal(option = "D", direction = -1)(length(unique(bird_red_census$holc_grade))),
labels = unique(bird_red_census$holc_grade), title = "Holc Grade") %>%
# Add legend for continuous variable
addLegend("bottomleft", pal = colorNumeric(palette = viridis_c(10), domain = merged_data1$percent_in_poverty),
values = ~percent_in_poverty, title = "Percent in Poverty") %>%
# Add red points
addCircleMarkers(data = point_sf, color = "red", radius = 5) %>%
# Set view to the extent of the data
fitBounds(lng1 = min(c(st_bbox(bird_red_census)$xmin, st_bbox(merged_data1)$xmin)),
lat1 = min(c(st_bbox(bird_red_census)$ymin, st_bbox(merged_data1)$ymin)),
lng2 = max(c(st_bbox(bird_red_census)$xmax, st_bbox(merged_data1)$xmax)),
lat2 = max(c(st_bbox(bird_red_census)$ymax, st_bbox(merged_data1)$ymax)))
install.packages("plotly")
library(plotly)
# Create the plot with the discrete variable
plot_discrete <- plot_ly(data = bird_red_census, type = "scatter", mode = "markers", marker = list(color = ~holc_grade)) %>%
add_sf(data = bird_red_census, color = ~holc_grade, colors = c("blue", "green", "orange", "red")) %>%
add_sf(data = point_sf, color = I("black"), size = I(0.75)) %>%
layout(title = "Holc Grade Map", showlegend = FALSE)
# Create the plot with the continuous variable
plot_continuous <- plot_ly(data = merged_data1, type = "scatter", mode = "markers", marker = list(color = ~percent_in_poverty, colorscale = "Viridis")) %>%
add_sf(data = merged_data1, color = ~percent_in_poverty, colorscale = "Viridis", opacity = 0.1) %>%
layout(title = "Percent in Poverty Map", showlegend = FALSE)
# Combine the two plots
subplot(plot_discrete, plot_continuous, nrows = 2)
View(bird_red_census)
summary(bird_red_census)
# Create the plot with the discrete variable
plot_discrete <- plot_ly(data = bird_red_census, type = "scatter", mode = "markers", marker = list(color = ~holc_grade)) %>%
add_sf(data = bird_red_census, color = ~holc_grade, colors = c("blue", "green", "orange", "red")) %>%
add_sf(data = point_sf, color = I("black"), size = I(0.75)) %>%
layout(title = "Holc Grade Map", showlegend = FALSE)
# Create the plot with the continuous variable
plot_continuous <- plot_ly(data = merged_data1, type = "scatter", mode = "markers", marker = list(color = ~percent_in_poverty, colorscale = "Viridis")) %>%
add_sf(data = merged_data1, color = ~percent_in_poverty, colorscale = "Viridis", opacity = 0.1) %>%
layout(title = "Percent in Poverty Map", showlegend = FALSE)
# Combine the two plots
subplot(plot_discrete, plot_continuous, nrows = 2)
plot_continuous <- plot_ly(data = merged_data1, type = "scatter", mode = "markers", marker = list(color = ~percent_in_poverty, colorscale = "Viridis")) %>%
add_sf(data = merged_data1, color = ~percent_in_poverty, colorscale = "Viridis", opacity = 0.1) %>%
layout(title = "Percent in Poverty Map", showlegend = FALSE)
plot_continuous
plot_continuous <- plot_ly(data = merged_data1, type = "scatter", mode = "markers", marker = list(color = ~percent_in_poverty, colorscale = "Viridis")) %>%
add_sf(data = merged_data1, color = ~percent_in_poverty, colorscale = "Viridis", opacity = 0.7) %>%
layout(title = "Percent in Poverty Map", showlegend = FALSE)
plot_continuous
plot_discrete <- plot_ly(data = bird_red_census, type = "scatter", mode = "markers", marker = list(color = ~holc_grade)) %>%
add_sf(data = bird_red_census, color = ~holc_grade) %>%
add_sf(data = point_sf, color = I("black"), size = I(0.75)) %>%
layout(title = "Holc Grade Map", showlegend = FALSE)
plot_discrete
plot_discrete <- plot_ly(data = bird_red_census, type = "scatter", mode = "markers", marker = list(color = ~holc_grade)) %>%
add_sf(data = point_sf, color = I("black"), size = I(0.75)) %>%
layout(title = "Holc Grade Map", showlegend = FALSE)
plot_discrete
str(bird_red_census)
str(point_sf)
plot_discrete <- plot_ly(data = bird_red_census, type = "scatter", mode = "markers", marker = list(color = ~holc_grade)) %>%
add_sf(data = bird_red_census, color = ~holc_grade) %>%
add_sf(data = point_sf, color = I("black"), size = I(0.75)) %>%
layout(title = "Holc Grade Map", showlegend = FALSE)
plot_discrete
plot_discrete <- plot_ly(data = bird_red_census, type = "scatter", mode = "markers", marker = list(color = ~holc_grade)) %>%
add_sf(data = bird_red_census, color = ~holc_grade) %>%
add_sf(data = point_sf, color = I("black"), size = I(0.75)) %>%
layout(title = "Holc Grade Map", showlegend = FALSE)
plot_discrete
# Extract the geometry from bird_red_census
bird_red_census_geometry <- st_geometry(bird_red_census)
# Create a data frame with holc_grade and geometry
plot_data <- data.frame(holc_grade = bird_red_census$holc_grade)
plot_data$geometry <- st_as_text(bird_red_census_geometry)
# Create the plot using plot_geo
plot_discrete <- plot_geo(data = plot_data, locationmode = "USA-states") %>%
add_trace(
z = ~holc_grade,
text = ~holc_grade,
colors = c("blue", "green", "orange", "red"),
type = "scattergeo",
mode = "markers",
marker = list(size = 8)
) %>%
layout(
title = "Holc Grade Map",
showlegend = FALSE,
geo = list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE
)
)
# Display the plot
plot_discrete
plot_continuous <- plot_ly(data = merged_data1, type = "scatter", mode = "markers", marker = list(color = ~percent_in_poverty, colorscale = "Viridis")) %>%
add_sf(data = merged_data1, color = ~percent_in_poverty, colorscale = "Viridis", opacity = 0.1) %>%
layout(title = "Percent in Poverty Map", showlegend = FALSE)
subplot(plot_discrete, plot_continuous, nrows = 2)
) %>%
# Create the plot with the discrete variable
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red")) +
geom_sf(data = point_sf, color = "black", size = 0.75) +
labs(fill = "Holc Grade")  # Replace with an appropriate title
# Add the continuous variable with a new fill scale
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha= 0.1) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
# Create the plot with the discrete variable
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_viridis_d() +
labs(fill = "Holc Grade")  # Replace with an appropriate title
# Add the continuous variable with a new fill scale
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
install.packages("ggnewscale")
install.packages("ggnewscale")
install.packages("ggnewscale")
install.packages("ggnewscale")
install.packages("ggnewscale")
install.packages("ggnewscale")
install.packages("ggnewscale")
install.packages("ggnewscale")
install.packages("ggnewscale")
library(osmdata)
library(sf)
library(ggplot2)
library(viridis)
library(plotly)
library(ggnewscale)
# Create the plot with the discrete variable
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_viridis_d() +
labs(fill = "Holc Grade")  # Replace with an appropriate title
# Add the continuous variable with a new fill scale
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
# Print the plot
print(poverty_plot)
# Create the plot with the discrete variable
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_viridis_d() +
labs(fill = "Holc Grade")  # Replace with an appropriate title
# Add the continuous variable with a new fill scale
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha= 0.3) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
# Print the plot
print(poverty_plot)
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"))
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha= 0.3) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
print(poverty_plot)
poverty_plot <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha= 0.3) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
poverty_plot
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"))
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2, alpha = 0.4) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"))
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2, alpha = 0.3) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"))
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2, alpha = 0.3) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"), alpha = 0.3)
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2, alpha = 0.1) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"))
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot
# Create the plot with the discrete variable
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
sscale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"))+ +
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"))+ +
labs(fill = "Holc Grade")  # Replace with an appropriate title
# Create the plot with the discrete variable
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white") +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"))+ +
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white") +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red"))+
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
print(poverty_plot)
# Add the continuous variable with a new fill scale
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha= 0.3) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
print(poverty_plot)
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha= 0.1) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
print(poverty_plot)
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha= 0.3) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
print(poverty_plot)
poverty_plot2 <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha = 0.25) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
poverty_plot2 <- poverty_plot2 +
new_scale_fill()
geom_sf(data = bird_red_census, aes(fill = holc_grade)) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red")) +
geom_sf(data = point_sf, color = "yellow", size = 0.5) +
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot2 <- poverty_plot2 +
new_scale_fill()
geom_sf(data = bird_red_census, aes(fill = holc_grade)) +
scale_fill_manual(values = c(A = "blue", "B" = "green", "C" = "orange", "D" = "red")) +
geom_sf(data = point_sf, color = "yellow", size = 0.5) +
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_viridis_d() +
labs(fill = "Holc Grade")  # Replace with an appropriate title
poverty_plot
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
poverty_plot
# Add the continuous variable with a new fill scale
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
poverty_plot
# Add the continuous variable with a new fill scale
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.3), color = "white", size = 0.2, alpha = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
poverty_plot
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
poverty_plot
# Create the plot with the discrete variable
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "orange", "D" = "red")) +
geom_sf(data = point_sf, color = "black", size = 0.75) +
labs(fill = "Holc Grade")  # Replace with an appropriate title
# Add the continuous variable with transparency
poverty_plot <- poverty_plot +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty), color = "white", size = 0.2, alpha = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
# Show the plot
print(poverty_plot)
# Create the plot with the discrete variable
poverty_plot <- ggplot() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "yellow", "D" = "red")) +  # Set colors for HOLC grades
labs(fill = "Holc Grade")  # Replace with an appropriate title
# Add the continuous variable with a new fill scale
poverty_plot <- poverty_plot +
new_scale_fill() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.3), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")  # Replace with an appropriate title
# Print the plot
print(poverty_plot)
# Create the plot with the discrete variable
poverty_plot <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.3), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty") +  # Replace with an appropriate title
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(values = c("A" = "blue", "B" = "green", "C" = "yellow", "D" = "red")) +  # Set colors for HOLC grades
labs(fill = "Holc Grade")  # Replace with an appropriate title
# Print the plot
print(poverty_plot)
poverty_plot <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.3), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty") +  # Replace with an appropriate title
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(
values = c("A" = "blue", "B" = "green", "C" = "yellow", "D" = "red"),
guide = guide_legend(),
aesthetics = c(alpha = 0.8)
) +  # Set colors for HOLC grades
labs(fill = "Holc Grade")  # Replace with an appropriate title
# Print the plot
print(poverty_plot)
poverty_plot <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.3), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty") +  # Replace with an appropriate title
poverty_plot <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.3), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")   # Replace with an appropriate title
poverty_plot <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.3), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")+   # Replace with an appropriate title
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(
values = c("A" = "blue", "B" = "green", "C" = "yellow", "D" = "red"),
guide = guide_legend(),
aesthetics = c(alpha = 0.8)
) +  # Set colors for HOLC grades
labs(fill = "Holc Grade")  # Replace with an appropriate title
print(poverty_plot)
poverty_plot <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.3), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")+   # Replace with an appropriate title
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(
values = c("A" = "blue", "B" = "green", "C" = "yellow", "D" = "red"),
guide = guide_legend(),
aesthetics = c(alpha = 0.6)
) +  # Set colors for HOLC grades
labs(fill = "Holc Grade")  # Replace with an appropriate title
print(poverty_plot)
poverty_plot <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.1), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")+   # Replace with an appropriate title
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(
values = c("A" = "blue", "B" = "green", "C" = "yellow", "D" = "red"),
guide = guide_legend(),
aesthetics = c(alpha = 0.6)
) +  # Set colors for HOLC grades
labs(fill = "Holc Grade")  # Replace with an appropriate title
print(poverty_plot)
poverty_plot <- ggplot() +
geom_sf(data = point_sf, color = "black", size = 0.5) +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.1), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")+   # Replace with an appropriate title
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(
values = c("A" = "blue", "B" = "green", "C" = "yellow", "D" = "red"),
guide = guide_legend(),
aesthetics = c(alpha = 0.6)
) +  # Set colors for HOLC grades
labs(fill = "Holc Grade")  # Replace with an appropriate title
print(poverty_plot)
poverty_plot <- ggplot() +
geom_sf(data = merged_data1, aes(fill = percent_in_poverty, alpha = 0.1), color = "white", size = 0.2) +
scale_fill_viridis_c() +
labs(fill = "Percent in Poverty")+   # Replace with an appropriate title
new_scale_fill() +
geom_sf(data = bird_red_census, aes(fill = holc_grade), color = "white", size = 0.2) +
scale_fill_manual(
values = c("A" = "blue", "B" = "green", "C" = "yellow", "D" = "red"),
guide = guide_legend(),
aesthetics = c(alpha = 0.6)
) + # Set colors for HOLC grades
geom_sf(data = point_sf, color = "black", size = 0.5) +
labs(fill = "Holc Grade")  # Replace with an appropriate title
print(poverty_plot)
